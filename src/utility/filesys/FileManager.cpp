/**
 * Included files
 */
#include "FileManager.h"
#include "src/entities/player/Player.h"
#include "src/entities/player/Inventory.h"
#include "src/items/Item.h"
#include "src/world/Zone.h"
#include <time.h>
#include <stdio.h>

void FileManager::init() {
} // init

void FileManager::savePlayer(int seed, Player *player, Zone *zone) {
    using namespace std;
    string filePath = "data/save/" + player->getName() + "_Save.sav";
    ofstream savefile;

    savefile.open(filePath);

    savefile << "# This save file was automatically generated by the game on" << endl;
    savefile << "# " << timestamp() << "." << endl;
    savefile << "# Editing this file may corrupt it if it is malformed." << endl;

    savefile << "name=" << player->getName() << endl;
    savefile << "level=" << player->getLevel() << endl;
    savefile << "hitpoints=" << player->getAttribute(hitpoints) << endl;
    savefile << "strength=" << player->getAttribute(strength) << endl;
    savefile << "armor=" << player->getAttribute(armor) << endl;
    savefile << "seed=" << seed << endl;
    savefile << "monsterLevel=" << zone->zoneLevel << endl;
    savefile << "monsterDifficulty=" << zone->monsterDifficulty << endl;
    savefile << "timePlayer=" << player->getTimePlayed() << endl;
    savefile << "isDead=" << (int)player->isDead() << endl;
    
    savefile << endl << "# Begin inventory list" << endl;

    for (Item *item : player->getInventory()->getItems()) {
        savefile << item->getName() << "=" << item->getGoldWorth() << endl;
    } // for

    savefile << endl << "# End inventory list" << endl;

    savefile.close();
} // savePlayer

std::string FileManager::timestamp() {
    time_t     now = time(0);
    struct tm  tstruct;
    char       buf[80];
    tstruct = *localtime(&now);

    strftime(buf, sizeof(buf), "%Y-%m-%d.%X", &tstruct);

    return buf;
} // timestamp

std::fstream *FileManager::openFile(std::string filepath) {
    std::fstream *result = new std::fstream();

    result->open(filepath);

    if (!result->is_open()) {
        return NULL;
    } // if

    return result;
} // openFile

void FileManager::closeFile(std::fstream *file) {
    file->close();
} // closeFile

std::string FileManager::readLine(std::fstream *file) {
    std::string result;

    std::getline(*file, result);

    if (result.length() <= 1) {
        return "#";
    }

    return result;
} // readLine
